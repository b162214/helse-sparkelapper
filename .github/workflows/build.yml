name: Build
on:
  push:
    branches:
      - main
env:
  DOCKER_IMAGE_PREFIX: docker.pkg.github.com/${{ github.repository }}/sparkelapp-
  SNYK_ORG: tbd-ty7
  RESOURCE: config/nais.yml
  TEAM: tbd

jobs:
  changed_files:
    runs-on: ubuntu-latest
    steps:
      - run: git diff-tree --no-commit-id --name-only -r $GITHUB_SHA
  generate_build_matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      deployMatrix: ${{ steps.set-matrix.outputs.deployMatrix }}
      team: ${{ steps.set-matrix.outputs.team }}
      tag: ${{ steps.set-matrix.outputs.tag }}
    steps:
      - uses: actions/checkout@v1
      - name: cache gradle wrapper
        uses: actions/cache@v2
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}
      - id: set-matrix
        run: |
          TAG=$(echo ${{ github.sha }} | cut -c1-7)
          MATRIX=$(./gradlew -q buildMatrix --console=plain)
          DEPLOY_MATRIX=$(./gradlew -q deployMatrix --console=plain)
          echo Setting matrix to $MATRIX
          echo "::set-output name=matrix::$MATRIX"
          echo "::set-output name=deployMatrix::$DEPLOY_MATRIX"
          echo "::set-output name=team::$TEAM"
          echo "::set-output name=tag::$TAG"

  build:
    needs: generate_build_matrix
    name: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: ${{ fromJSON(needs.generate_build_matrix.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-java@v1
        with:
          java-version: '14.x'
      - name: cache gradle deps
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-caches-${{ hashFiles('**/*.gradle', '**/*.gradle.kts', 'gradle.properties') }}
      - name: cache gradle wrapper
        uses: actions/cache@v2
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}
      - name: test and build
        run: ./gradlew ${{ matrix.project }}::test ${{ matrix.project }}::build
      - name: Check app.jar existence
        id: app_jar
        uses: andstor/file-existence-action@v1
        with:
          files: "${{ matrix.project }}/build/libs/app.jar"
      - name: create docker tag
        if: steps.app_jar.outputs.files_exists == 'true'
        run: |
          echo "IMAGE=${DOCKER_IMAGE_PREFIX}${{ matrix.project }}:${{ needs.generate_build_matrix.outputs.tag }}" >> $GITHUB_ENV
      - name: build docker image
        if: steps.app_jar.outputs.files_exists == 'true'
        run: docker build ${{ matrix.project }} --pull -t $IMAGE -f Dockerfile
      - name: push docker image
        if: steps.app_jar.outputs.files_exists == 'true'
        run: |
          echo $GITHUB_TOKEN | docker login --username $GITHUB_REPOSITORY --password-stdin https://docker.pkg.github.com
          docker push $IMAGE
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    needs: [generate_build_matrix, build]
    name: deploy
    strategy:
      matrix:
        project: ${{ fromJSON(needs.generate_build_matrix.outputs.deployMatrix) }}
        cluster: [dev-fss, prod-fss]
    runs-on: ubuntu-latest
    steps:
      - name: create env vars
        run: |
          VARS_FILE="config/${{ matrix.project }}/${{ matrix.cluster }}.yml"
          echo "VARS=$VARS_FILE" >> $GITHUB_ENV
          echo "IMAGE=${DOCKER_IMAGE_PREFIX}${{ matrix.project }}:${{ needs.generate_build_matrix.outputs.tag }}" >> $GITHUB_ENV
      - name: Fetch sources
        uses: actions/checkout@v2
      - name: Check for vars yml
        id: vars_file
        uses: andstor/file-existence-action@v1
        with:
          files: "${{ env.VARS }}"
      - name: deploy
        if: steps.vars_file.outputs.files_exists == 'true'
        uses: nais/deploy/actions/deploy@v1
        env:
          CLUSTER: ${{ matrix.cluster }}
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          VAR: team=${{ needs.generate_build_matrix.outputs.team }},app=${{ matrix.project }}

  snyk:
    name: check vulnerabilities
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Gradle vulnerability check
        uses: snyk/actions/gradle-jdk12@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --all-sub-projects --org=${{ env.SNYK_ORG }} --fail-on=all
          command: monitor